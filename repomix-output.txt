This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
lua/
  plugins/
    alpha.lua
    catppuccin.lua
    completions.lua
    context-comment-string.lua
    copilot.lua
    copilotChat.lua
    lsp-config.lua
    lualine.lua
    neo-tree.lua
    non-ls.lua
    obsidian.lua
    surround.lua
    telescope.lua
    treesitter.lua
  plugins.lua
  vim-options.lua
.gitignore
.luarc.json
init.lua
lazyvim.json
Mason.txt
README.md

================================================================
Files
================================================================

================
File: lua/plugins/alpha.lua
================
return {
  "goolord/alpha-nvim",
  dependencies = {
    "nvim-tree/nvim-web-devicons",
  },

  config = function()
    local alpha = require("alpha")
    local dashboard = require("alpha.themes.startify")

    dashboard.section.header.val = {
      [[                                                                       ]],
      [[                                                                       ]],
      [[                                                                       ]],
      [[                                                                       ]],
      [[                                                                     ]],
      [[       ████ ██████           █████      ██                     ]],
      [[      ███████████             █████                             ]],
      [[      █████████ ███████████████████ ███   ███████████   ]],
      [[     █████████  ███    █████████████ █████ ██████████████   ]],
      [[    █████████ ██████████ █████████ █████ █████ ████ █████   ]],
      [[  ███████████ ███    ███ █████████ █████ █████ ████ █████  ]],
      [[ ██████  █████████████████████ ████ █████ █████ ████ ██████ ]],
      [[                                                                       ]],
      [[                                                                       ]],
      [[                                                                       ]],
    }

    alpha.setup(dashboard.opts)
  end,
}

================
File: lua/plugins/catppuccin.lua
================
return {
	"catppuccin/nvim",
	lazy = false,
	name = "catppuccin",
	priority = 1000,
	config = function()
	  vim.cmd.colorscheme("catppuccin")
	end,
}

================
File: lua/plugins/completions.lua
================
return {
  {
    "hrsh7th/cmp-nvim-lsp"
  },
  {
    "L3MON4D3/LuaSnip",
    dependencies = {
      "saadparwaiz1/cmp_luasnip",
      "rafamadriz/friendly-snippets",
    },
  },
  {
    "hrsh7th/nvim-cmp",
    config = function()
      local cmp = require("cmp")
      require("luasnip.loaders.from_vscode").lazy_load()

      cmp.setup({
        snippet = {
          expand = function(args)
            require("luasnip").lsp_expand(args.body)
          end,
        },
        window = {
          completion = cmp.config.window.bordered(),
          documentation = cmp.config.window.bordered(),
        },
        mapping = cmp.mapping.preset.insert({
          ["<C-b>"] = cmp.mapping.scroll_docs(-4),
          ["<C-f>"] = cmp.mapping.scroll_docs(4),
          ["<C-Space>"] = cmp.mapping.complete(),
          ["<C-e>"] = cmp.mapping.abort(),
          ["<CR>"] = cmp.mapping.confirm({ select = true }),
        }),
        sources = cmp.config.sources({
          { name = "nvim_lsp" },
          { name = "luasnip" }, -- For luasnip users.
        }, {
          { name = "buffer" },
        }),
      })
    end,
  },
}

================
File: lua/plugins/context-comment-string.lua
================
return {
	{
		"JoosepAlviste/nvim-ts-context-commentstring",
		lazy = false, -- Ensure it's loaded eagerly
		config = function()
			require("ts_context_commentstring").setup({
				enable_autocmd = false, -- Disable CursorHold autocommand
			})
		end,
	},
	{
		-- Ensure commenting functionality works seamlessly
		"numToStr/Comment.nvim",
		config = function()
			require("Comment").setup({
				pre_hook = function(ctx)
					-- Use ts_context_commentstring for files where it's needed
					if vim.bo.filetype == "javascript" or vim.bo.filetype == "typescriptreact" then
						return require("ts_context_commentstring.internal").calculate_commentstring()
					end
				end,
			})

      -- Override get_option to use ts_context_commentstring's commentstring
			local get_option = vim.filetype.get_option
			vim.filetype.get_option = function(filetype, option)
				return option == "commentstring"
						and require("ts_context_commentstring.internal").calculate_commentstring()
					or get_option(filetype, option)
			end
		end,
	},
}

================
File: lua/plugins/copilot.lua
================
return {
  'github/copilot.vim'
}

================
File: lua/plugins/copilotChat.lua
================
return {
	{
		"CopilotC-Nvim/CopilotChat.nvim",
		dependencies = {
			{ "github/copilot.vim" }, -- or zbirenbaum/copilot.lua
			{ "nvim-lua/plenary.nvim" }, -- for curl, log wrapper
		},
		build = "make tiktoken", -- Only on MacOS or Linux
		opts = {
			-- See Configuration section for options
			mappings = {
				-- Use tab for completion
				complete = {
					insert = "", -- Use <Tab> for completion
				},
				-- Close the chat
				close = {
					normal = "q",
					insert = "<C-c>",
				},
				-- Reset the chat buffer
				reset = {
					normal = "<C-x>",
					insert = "<C-x>",
				},
				-- Submit the prompt to Copilot
				submit_prompt = {
					normal = "<CR>",
					insert = "<C-CR>",
				},
				-- Accept the diff
				accept_diff = {
					normal = "<C-y>",
					insert = "<C-y>",
				},
				-- Show help
				show_help = {
					normal = "g?",
				},
			},
		},
		config = function(_, opts)
			-- Setup the plugin
			require("CopilotChat").setup(opts)

			-- Key mappings
			vim.keymap.set("n", "<leader>gc", ":CopilotChat<CR>", { desc = "Open Copilot Chat" }) -- <leader>gc
		end,
		-- See Commands section for default commands if you want to lazy load on them
	},
}

================
File: lua/plugins/lsp-config.lua
================
return {
	{
		"williamboman/mason.nvim",
		lazy = false,
		config = function()
			require("mason").setup()
		end,
	},
	{
		"williamboman/mason-lspconfig.nvim",
		lazy = false,
		opts = {
			auto_install = true,
		},
	},
	{
		"neovim/nvim-lspconfig",
		lazy = false,
		config = function()
			local lspconfig = require("lspconfig")
			local capabilities = require("cmp_nvim_lsp").default_capabilities()

			-- ============================== Volar set up ==============================
			-- -- Path to the root-level TypeScript installation
			-- local root_tsdk = vim.fn.getcwd() .. "/node_modules/typescript/lib"
			--
			-- lspconfig.volar.setup({
			-- 	capabilities = capabilities,
			-- 	filetypes = { "typescript", "javascript", "javascriptreact", "typescriptreact", "vue" },
			-- 	init_options = {
			-- 		typescript = {
			-- 			tsdk = root_tsdk, -- Set the path to the root TypeScript SDK
			-- 		},
			-- 		vue = {
			-- 			hybridMode = false,
			-- 		},
			-- 	},
			-- })
			-- ============================================================

			-- Freaking annoying, but when workig on non-Vue project, I need to comment out ts_ls and uncomment the Volar
			lspconfig.ts_ls.setup({
				capabilities = capabilities,
			})
			-- Language server setups
			lspconfig.lua_ls.setup({
				capabilities = capabilities,
			})
			lspconfig.html.setup({
				capabilities = capabilities,
			})
			lspconfig.jsonls.setup({
				capabilities = capabilities,
			})
			lspconfig.eslint.setup({
				capabilities = capabilities,
			})

			-- Keymaps
			vim.keymap.set("n", "K", vim.lsp.buf.hover, {})
			vim.keymap.set("n", "gd", vim.lsp.buf.definition, {})
			vim.keymap.set({ "n", "v" }, "<leader>ca", vim.lsp.buf.code_action, {})
			vim.keymap.set("n", "<leader>r", vim.lsp.buf.rename, { desc = "Rename symbol (LSP)" })
			vim.keymap.set("n", "<C-k>", vim.diagnostic.open_float, { desc = "Peek LSP Error" })
			vim.keymap.set("n", "n[", vim.diagnostic.goto_prev, { desc = "Go to previous diagnostic" })
			vim.keymap.set("n", "n]", vim.diagnostic.goto_next, { desc = "Go to next diagnostic" })
		end,
	},
}

================
File: lua/plugins/lualine.lua
================
return {
  "nvim-lualine/lualine.nvim",
  config = function()
    require('lualine').setup({
	    options = {
	      theme = 'dracula'
	    }
})
  end
}

================
File: lua/plugins/neo-tree.lua
================
return {
  "nvim-neo-tree/neo-tree.nvim",
  branch = "v3.x",
  dependencies = {
    "nvim-lua/plenary.nvim",
    "nvim-tree/nvim-web-devicons",
    "MunifTanjim/nui.nvim",
  },
  opts = {
    filesystem = {
      filtered_items = {
        hide_dotfiles = false, -- Do not hide dotfiles (e.g., .gitignore, .env)
        hide_gitignored = false,
        never_show = { ".git", ".git/*" }, -- Hide .git and its contents
      },
    },
  },
  config = function(_, opts) -- Pass opts to setup
    require("neo-tree").setup(opts)
    vim.keymap.set("n", "<leader>ne", ":Neotree filesystem reveal right<CR>", {})
    vim.keymap.set("n", "<leader>bf", ":Neotree buffers reveal float<CR>", {})
  end,
}

================
File: lua/plugins/non-ls.lua
================
return {
	{
		"williamboman/mason.nvim",
		config = true,
	},
	{
		"jay-babu/mason-null-ls.nvim",
		dependencies = {
			"nvimtools/none-ls.nvim",
			"nvimtools/none-ls-extras.nvim",
		},
		config = function()
			require("mason-null-ls").setup({
				ensure_installed = { "eslint_d", "prettier", "stylua" }, -- Install these automatically
				automatic_installation = true, -- Automatically install configured sources
			})

			local null_ls = require("null-ls")

			null_ls.setup({
				sources = {
					null_ls.builtins.formatting.stylua,
					null_ls.builtins.formatting.prettier,
					require("none-ls.diagnostics.eslint_d"),
					require("none-ls.formatting.eslint_d"),
				},
			})

			vim.keymap.set("n", "<leader>gf", vim.lsp.buf.format, {})
		end,
	},
}

================
File: lua/plugins/obsidian.lua
================
return {
  "epwalsh/obsidian.nvim",
  version = "*", -- recommended, use the latest release instead of the latest commit
  lazy = true,
  ft = "markdown",
  dependencies = {
    "nvim-lua/plenary.nvim",
    "nvim-telescope/telescope.nvim",
    "hrsh7th/nvim-cmp",
  },
  opts = {
    workspaces = {
      {
        name = "kei95",
        path = "~/Library/Mobile Documents/iCloud~md~obsidian/Documents/kei95",
      },
    },

    -- Add note_id_func inside opts
    note_id_func = function(title)
      -- Create note IDs in a Zettelkasten format with a timestamp and a suffix.
      local suffix = ""
      if title ~= nil then
        -- If title is given, transform it into a valid file name.
        return title:gsub(" ", "-")
      else
        -- If title is nil, just add 4 random uppercase letters to the suffix.
        for _ = 1, 4 do
          suffix = suffix .. string.char(math.random(65, 90))
          return tostring(os.time()) .. "-" .. suffix
        end
      end
    end,
  },
  keys = {
    {
      desc = "Create New Note",
      "<LEADER>on",
      "<cmd>ObsidianNew<cr>",
    },
    {
      desc = "Open Note in Obsidian",
      "<LEADER>oo",
      "<cmd>ObsidianOpen<cr>",
    },
    {
      desc = "Search Note in Obsidian",
      "<LEADER>os",
      "<cmd>ObsidianSearch<cr>",
    },
    {
      desc = "Search Tags",
      "<LEADER>ot",
      "<cmd>ObsidianTags<cr>",
    },
  },
}

================
File: lua/plugins/surround.lua
================
return {
  "tpope/vim-surround",
  config = function()
    -- Optional setup if needed
  end,
}

================
File: lua/plugins/telescope.lua
================
return {
	{
		"BurntSushi/ripgrep",
	},
	{
		"nvim-telescope/telescope-ui-select.nvim",
	},
	{
		"nvim-telescope/telescope.nvim",
		tag = "0.1.5",
		dependencies = { "nvim-lua/plenary.nvim" },
		config = function()
			require("telescope").setup({
				defaults = {
					file_ignore_patterns = {
						"node_modules",
						"%.lock$",
					},
					pickers = {
						find_files = {
							hidden = true, -- Include hidden files
						},
					},
				},
				extensions = {
					["ui-select"] = {
						require("telescope.themes").get_dropdown({}),
					},
				},
			})
			local builtin = require("telescope.builtin")
			vim.keymap.set("n", "<C-p>", builtin.find_files, {})
			vim.keymap.set("n", "<leader>fg", builtin.live_grep, {})
			vim.keymap.set("n", "<leader>ff", builtin.current_buffer_fuzzy_find, {})
			vim.keymap.set("n", "<leader><leader>", builtin.oldfiles, {})

			require("telescope").load_extension("ui-select")
		end,
	},
}

================
File: lua/plugins/treesitter.lua
================
return {
  {
    "nvim-treesitter/nvim-treesitter",
    build = ":TSUpdate",
    config = function()
      local config = require("nvim-treesitter.configs")
      config.setup({
        ensure_installed = { "markdown", "markdown_inline" },
        auto_install = true,
        highlight = { enable = true },
        indent = { enable = true },
      })
    end,
  },
}

================
File: lua/plugins.lua
================
return {}

================
File: lua/vim-options.lua
================
vim.cmd("set expandtab")
vim.cmd("set tabstop=2")
vim.cmd("set softtabstop=2")
vim.cmd("set shiftwidth=2")

vim.g.mapleader = " "
vim.g.background = "light"
vim.opt.swapfile = false
vim.api.nvim_set_option("clipboard", "unnamed")
vim.api.nvim_set_keymap('t', '<Esc>', '<C-\\><C-n>', { noremap = true, silent = true })
vim.o.encoding = "utf-8"
vim.opt.fileencodings = { "utf-8" }
vim.env.LANG = "en_US.UTF-8"
vim.opt.conceallevel = 0

vim.keymap.set('n', '<leader>h', '<C-w>h', { noremap = true, silent = true }) -- Move to the left split
vim.keymap.set('n', '<leader>j', '<C-w>j', { noremap = true, silent = true }) -- Move to the split below
vim.keymap.set('n', '<leader>k', '<C-w>k', { noremap = true, silent = true }) -- Move to the split above
vim.keymap.set('n', '<leader>l', '<C-w>l', { noremap = true, silent = true }) -- Move to the right split

================
File: .gitignore
================
lazy-lock.json

================
File: .luarc.json
================
{
    "diagnostics.globals": [
        "vim"
    ]
}

================
File: init.lua
================
-- Bootstrap lazy.nvim
vim.cmd("language en_US")

local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not (vim.uv or vim.loop).fs_stat(lazypath) then
	local lazyrepo = "https://github.com/folke/lazy.nvim.git"
	local out = vim.fn.system({ "git", "clone", "--filter=blob:none", "--branch=stable", lazyrepo, lazypath })
	if vim.v.shell_error ~= 0 then
		vim.api.nvim_echo({
			{ "Failed to clone lazy.nvim:\n", "ErrorMsg" },
			{ out, "WarningMsg" },
			{ "\nPress any key to exit..." },
		}, true, {})
		vim.fn.getchar()
		os.exit(1)
	end
end

vim.opt.rtp:prepend(lazypath)

require("vim-options")
require("lazy").setup({
	spec = {
		-- import your plugins
		{ import = "plugins" },
	},
	-- Configure any other settings here. See the documentation for more details.
	-- colorscheme that will be used when installing plugins.
	install = { colorscheme = { "habamax" } },
	-- automatically check for plugin updates
	checker = { enabled = true },
})

================
File: lazyvim.json
================
{
  "extras": [

  ],
  "news": {
    "NEWS.md": "7429"
  },
  "version": 7
}

================
File: Mason.txt
================
- typescript-language-server
- eslint_d 
- prettier
- shfmt
- stylua
- lua-language-server
- json-lsp
- vue-language-server (ONLY IF YOU NEED VUE) 
- eslint-lsp

================
File: README.md
================
## Get started

- Install Neovim (`brew install neovim`)
- Clone this repo under `~/.config`
- You are good to go 🎉

## Language Servers

- Command `:Mason`
- Select Items mentioned in the txt file

## Telescope (file/code search)

- Install `brew install ripgrep`
- Install `brew install fd`

## Copilot

In order to use copilot, make sure to log into Github with an account with copilot enabled

- Command `:Copilot setup`
- Follow the instructions

## Vue support

If you wanted to support Vue, make sure to install vue-language-server with Mason. Also, npm registry should be set to `https://registry.npmjs.org/` to install the right package. 

## If something doesn't work

- `:checkhealth [PACKAGE_NAME]`



================================================================
End of Codebase
================================================================
